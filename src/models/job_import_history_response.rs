/*
 * Galaxy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 22.05.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// JobImportHistoryResponse : Base model definition with common configuration used by all derived models.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct JobImportHistoryResponse {
    /// The time and date this item was created.
    #[serde(rename = "create_time")]
    pub create_time: String,
    /// The exit code returned by the tool. Can be unset if the job is not completed yet.
    #[serde(rename = "exit_code", skip_serializing_if = "Option::is_none")]
    pub exit_code: Option<i32>,
    /// The (major) version of Galaxy used to create this job.
    #[serde(rename = "galaxy_version")]
    pub galaxy_version: String,
    /// The encoded ID of the history associated with this item.
    #[serde(rename = "history_id", skip_serializing_if = "Option::is_none")]
    pub history_id: Option<String>,
    /// The encoded ID of this entity.
    #[serde(rename = "id")]
    pub id: String,
    /// Text message containing information about the history import.
    #[serde(rename = "message")]
    pub message: String,
    /// The name of the database model class.
    #[serde(rename = "model_class", skip_serializing_if = "Option::is_none")]
    pub model_class: Option<String>,
    /// Current state of the job.
    #[serde(rename = "state")]
    pub state: Box<crate::models::GalaxyModelJobStates>,
    /// Identifier of the tool that generated this job.
    #[serde(rename = "tool_id")]
    pub tool_id: String,
    /// The last time and date this item was updated.
    #[serde(rename = "update_time")]
    pub update_time: String,
}

impl JobImportHistoryResponse {
    /// Base model definition with common configuration used by all derived models.
    pub fn new(create_time: String, galaxy_version: String, id: String, message: String, state: crate::models::GalaxyModelJobStates, tool_id: String, update_time: String) -> JobImportHistoryResponse {
        JobImportHistoryResponse {
            create_time,
            exit_code: None,
            galaxy_version,
            history_id: None,
            id,
            message,
            model_class: None,
            state: Box::new(state),
            tool_id,
            update_time,
        }
    }
}


